---
import path from 'path';
import { remark } from 'remark';
import mdx from 'remark-mdx';
import strip from 'remark-mdx-to-plain-text';

import { getCollection } from 'astro:content';
import { sections } from '@content/config';

import ThemeSwitcher from '@components/ThemeSwitcher';
import SiteSearch from '@components/SiteSearch';
import MainNavigation from '@components/MainNavigation';
import ContentNavigation from '@components/ContentNavigation';

function stringify(body) {
  return new Promise((resolve, reject) => {
    remark()
      .use(mdx)
      .use(strip, ['mdxjsEsm', 'mdxJsxFlowElement'])
      .process(body, function (err, file) {
        if (err) reject(err);
        resolve(String(file));
      });
  });
}

async function getAllContent() {
  const collections = await Promise.all(
    sections.map(async function collect(section) {
      const collections = await getCollection(section);
      const promises = collections.map(async function transform(collection) {
        const body = await stringify(collection.body);
        return {
          ...collection,
          body,
          path: path.join(import.meta.env.BASE_URL, section, collection.slug),
        };
      });
      return Promise.all(promises);
    })
  );

  return collections.flat();
}

function buildNavigation(reference) {
  return reference.reduce((acc, entry) => {
    if (!acc[entry.collection]) {
      acc[entry.collection] = {};
    }
    acc[entry.collection][entry.data.title] = entry.path;
    return acc;
  }, {});
}

const themes  = await fetch('https://theme-api.uxp.godaddy.com/v1/themes')
  .then((response) => response.json())
  .then(({ themes }) => themes.sort((a, b) => a.alias.localeCompare(b.alias)));

const content = await getAllContent();
const navigation = buildNavigation(content);
const { outline } = Astro.props;
---

<style lang="scss">
  @import '@ux/intents/lib/index';

  #chrome {
    display: flex;
    flex-direction: column;
    height: 100vh;
  }

  header {
    display: flex;
    align-items: center;
    border-bottom: $ux-box-borderWidth solid $ux-box-borderColor;
  }

  #logo {
    margin-inline-end: auto;
    font-size: 2rem;
    color: inherit;
    font-weight: bolder;
    padding: 1rem;
    flex: 0 1 260px;
    border-right: $ux-box-borderWidth solid $ux-box-borderColor;
    text-align: center;
    text-decoration: none;
  }

  #controls {
    display: flex;
    padding: 1rem;
    gap: 1rem;
  }

  main {
    display: flex;
    flex: 1;
  }

  .main-child {
    overflow: auto;
    > * {
      height: 100%;
    }
  }

  #navigation {
    flex: 0 1 260px;
    border-right: $ux-box-borderWidth solid $ux-box-borderColor;
  }

  #max-width {
    max-width: min(800px, 100vw - 2rem);
    width: 100%;
  }

  #content {
    flex: 1 0 auto;
    padding: 1rem;
    display: flex;
    justify-content: center;
    gap: 1rem;
  }
</style>

<div id="chrome">
  <header>
    <a id='logo' href={ import.meta.env.BASE_URL }>UXCore</a>
    <div id='controls'>
      <SiteSearch client:load reference={content} />
      <ThemeSwitcher client:load themes={themes} />
    </div>
  </header>
  <main>
    <div class="main-child" id="navigation">
      <MainNavigation tree={navigation} />
    </div>
    <div class="main-child" id="content">
      <div id="max-width"><slot /></div>
    </div>
    <ContentNavigation client:load outline={outline}/>
  </main>
</div>
